{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"o",
				"pre_options_none\ttheme_options_none"
			],
			[
				"preg",
				"preg_replace"
			],
			[
				"subs",
				"substr_replace"
			],
			[
				"php",
				"phpinfo"
			]
		]
	},
	"buffers":
	[
		{
			"file": "Symfony3.sublime-project",
			"settings":
			{
				"buffer_size": 45,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "<?php\n\nnamespace Acme\\StoreBundle\\Controller;\n\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\Controller;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Acme\\StoreBundle\\Entity\\Product;\nuse Acme\\StoreBundle\\Entity\\Category;\nuse Acme\\StoreBundle\\Form\\ProductType;\n\n\nclass DefaultController extends Controller\n{\n    private $data;\n\n    public function indexAction()\n    {\n        return $this->render('AcmeStoreBundle:Default:index.html.twig');\n    }\n\n    /*\n        ################# CREATE NEW PRODUCT METHODS #################  \n    */\n\n    /* Execute the SQL Statements */\n\n    public function createCategoryAction($name)\n    {\n        $category = new Category();\n\n        $category->setName(ucfirst($name));\n\n        $em = $this->getDoctrine()->getManager();\n\n        if (!$em->getRepository('AcmeStoreBundle:Category')->findOneByName($name)) {\n            $em->persist($category);\n            $em->flush();\n            return new Response( 'Creata categoria con id ' . $category->getId() );\n        } else {\n            return new Response( 'Categoria ' . $name . ' gia presente nel DB' );\n        }\n    }\n\n    /* Build Add Product Form */    \n\n    public function productAddAction(Request $request)\n    {\n        $product = new Product();\n\n        $form = $this->createForm(new ProductType(), $product, array(\n                'method' => 'POST',\n            ));\n        \n        $form->handleRequest($request);\n\n        if ($form->isValid()) {\n\n            if( $this->createProductAction($request) ) {\n                $this->get('session')->getFlashBag()->add(\n                            'notice',\n                            'Prodotto inserito con successo'\n                );\n                return $this->redirect($this->generateUrl('acme_store_manage_product'));\n            }\n        }\n\n        return $this->render('AcmeStoreBundle:Product:manageProduct.html.twig', array('form' => $form->createView(),));\n    }\n    \n    /* Return Bool value and execute the SQL Statements */    \n\n    public function createProductAction(Request $request)\n    {\n        \n        $formVars = $request->request->get('product');\n\n        $product = new Product();\n        \n        $product->setName($formVars['name']);\n        $product->setPrice($formVars['price']);\n        $product->setDescription($formVars['description']);\n        \n        $categoryId = $formVars['category'];\n\n        $em = $this->getDoctrine()->getManager();\n\n        $validator = $this->get('validator');\n        $errors = $validator->validate($product);\n\n        if ( count($errors) > 0 ) {\n\n            return false;\n\n        } else {\n\n            try {\n            \n                $em->persist($product);\n                $em->flush();\n            \n            } catch (\\Exception $e) {\n                 \n                $em->resetManager();\n                return false;\n            }\n            \n            $newproduct = $em->getRepository(\"AcmeStoreBundle:Product\")->find($product->getId());\n            /** Create new product and retrive its informations in $newproduct */\n\n            $repository = $em->getRepository(\"AcmeStoreBundle:Category\")->find($categoryId);\n\n            $newproduct->setCategory($repository);\n\n            try {\n\n                $em->persist($newproduct);\n                $em->flush();\n            \n            } catch (\\Exception $e) {\n                 \n                $em->resetManager();\n                return false;\n            } \n            /** Update the id_category field of the new product with parameter $categoryId */\n\n            return true;\n        }\n    }\n\n    /*\n        #################  UPDATE PRODUCT METHODS #################\n    */\n\n\n    /* Build Update Product Form */    \n\n    public function productUpdateAction(Request $request, $id)\n    {\n        $product = new Product();\n\n        $em = $this->getDoctrine()->getManager();\n\n        $productItem = $em->getRepository('AcmeStoreBundle:Product')->find($id);\n\n        $product->setName( $productItem->getName() );\n        $product->setDescription( $productItem->getDescription() );\n        $product->setPrice( $productItem->getPrice() );\n        $product->setCategory( $productItem->getCategory() );\n\n        $form = $this->createForm(new ProductType(), $product, array('method' => 'POST'));\n        $form->handleRequest($request);\n        if ($form->isValid()) {\n            $this->updateProductAction($request, $id);\n        }\n\n        return $this->render('AcmeStoreBundle:Product:manageProduct.html.twig', array('form' => $form->createView()));   \n    }\n\n    /* Return Bool value and execute the SQL Statements */    \n\n    public function updateProductAction(Request $request, $id)\n    {\n        $formVars = $request->request->get('product');\n\n        $em = $this->getDoctrine()->getManager();\n\n        $product = $em->getRepository('AcmeStoreBundle:Product')->find($id);\n        $category = $em->getRepository(\"AcmeStoreBundle:Category\")->find($formVars['category']);\n\n        //$product = new Product();\n        $product->setName($formVars['name']);\n        $product->setPrice($formVars['price']);\n        $product->setDescription($formVars['description']);\n        $product->setCategory($category);\n\n        $errors = $this->get('validator')->validate($product);\n\n        if ( count($errors) > 0 ) {\n\n            $this->get('session')->getFlashBag()->add('notice', 'Nessuna categoria con questo Id');\n\n        } else {\n            try {\n                $em->persist($product);\n                $em->flush();          \n            } catch (\\Exception $e) {\n                $em->resetManager();\n                $this->get('session')->getFlashBag()->add('notice', 'Errore in fase di aggiornamento');\n            }\n            $this->get('session')->getFlashBag()->add('notice', 'Prodotto aggiornato con successo');\n        }\n        return $this->redirect($this->generateUrl('acme_store_product_update', array('id' => $id)));      \n    }\n\n\n    /* Show full list of Products */\n\n    public function showAllAction()\n    {\n        $products = $this->getDoctrine()\n                         ->getRepository('AcmeStoreBundle:Product')\n                         ->findAllOrderedByName();\n\n        $i = 0;\n        foreach ($products as $product) {\n            $rows[$i]['id']         = $product->getId();\n            $rows[$i]['name']       = $product->getName();\n            $rows[$i]['price']      = $product->getPrice();\n            $rows[$i]['category']   = $product->getCategory();\n            $i ++;\n        }\n\n        return $this->render('AcmeStoreBundle:Product:showAll.html.twig', array('rows' => $rows));\n    }\n\n    /**\n     * Remove Product from display list\n     */\n    public function removeAction($id)\n    {\n        $em = $this->getDoctrine()->getManager();\n        $product = $em->getRepository('AcmeStoreBundle:Product')->find($id);\n\n        if (!$product) {\n            $this->get('session')->getFlashBag()->add('notice', 'Nessun prodotto con questo Id trovato');\n        }\n\n        $em->remove($product);\n        $em->flush();\n\n        $this->get('session')->getFlashBag()->add('notice', 'Prodotto eliminato con successo');\n    \n        return $this->redirect($this->generateUrl('acme_store_show_all'));\n    }\n\n    /**\n     * Old Methods No use/ To remove\n     */\n    public function showAction($id)\n    {\n    \t$repository = $this->getDoctrine()->getRepository('AcmeStoreBundle:Product');\n\n        $product = $repository->find($id);\n\n        if (!$product) {\n    \t\treturn new Response('Nessun prodotto trovato con id ' . $id );\n    \t} else {\n    \t\treturn $this->render('AcmeStoreBundle:Default:show.html.twig', \n                array( \n                    'name' => $product->getName(), \n                    'description' => $product->getDescription(), \n                    'price' => $product->getPrice(),\n                    )\n                );\n    \t}\n    }\n\n    /**\n     * Update Product \n     */\n    public function updateAction($id)\n    {\n        $em = $this->getDoctrine()->getManager();\n        $product = $em->getRepository('AcmeStoreBundle:Product')->find($id);\n\n        if (!$product) {\n            return new Response('Nessun prodotto trovato con id ' . $id );\n        }\n\n        $product->setName('Kawasaki Z1000 2008');\n        $em->flush();\n\n        return new Response('Prodotto Modificato' );\n    }\n\n}\n",
			"file": "src/Acme/StoreBundle/Controller/DefaultController.php",
			"file_size": 8382,
			"file_write_time": 131357838010000000,
			"settings":
			{
				"buffer_size": 8358,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 93.0,
		"last_filter": "json",
		"selected_items":
		[
			[
				"json",
				"Set Syntax: JSON"
			],
			[
				"pac",
				"Package Control: Install Package"
			],
			[
				"html",
				"Set Syntax: HTML"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"php",
				"Set Syntax: PHP"
			],
			[
				"pack",
				"Package Control: Install Package"
			]
		],
		"width": 489.0
	},
	"console":
	{
		"height": 151.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = 'df21e130d211cfc94d9b0905775a7c0f' + '1e3d39e33b79698005270310898eea76'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/sites/www/06-Fab01-projects/pro_scheduler",
		"/sites/www/06-Fab01-projects/pro_scheduler/src/Acme",
		"/sites/www/06-Fab01-projects/pro_scheduler/src/Acme/StoreBundle",
		"/sites/www/06-Fab01-projects/pro_scheduler/src/Acme/StoreBundle/Controller",
		"/sites/www/06-Fab01-projects/pro_scheduler/src/Acme/StoreBundle/Entity",
		"/sites/www/06-Fab01-projects/pro_scheduler/src/Acme/StoreBundle/Tests",
		"/sites/www/06-Fab01-projects/pro_scheduler/src/Acme/StoreBundle/Tests/Controller",
		"/sites/www/06-Fab01-projects/pro_scheduler/src/AppBundle",
		"/sites/www/06-Fab01-projects/pro_scheduler/src/AppBundle/Controller",
		"/sites/www/06-Fab01-projects/pro_scheduler/web/bundles",
		"/sites/www/06-Fab01-projects/pro_scheduler/web/bundles/acmestore",
		"/sites/www/06-Fab01-projects/pro_scheduler/web/bundles/acmestore/bootstrap",
		"/sites/www/06-Fab01-projects/pro_scheduler/web/bundles/acmestore/bootstrap/css",
		"/sites/www/06-Fab01-projects/pro_scheduler/web/bundles/acmestore/bootstrap/fonts",
		"/sites/www/06-Fab01-projects/pro_scheduler/web/bundles/acmestore/bootstrap/js",
		"/sites/www/06-Fab01-projects/pro_scheduler/web/bundles/acmestore/css",
		"/sites/www/06-Fab01-projects/pro_scheduler/web/bundles/acmestore/images",
		"/sites/www/06-Fab01-projects/pro_scheduler/web/bundles/framework",
		"/sites/www/06-Fab01-projects/pro_scheduler/web/bundles/framework/css",
		"/sites/www/06-Fab01-projects/pro_scheduler/web/bundles/framework/images"
	],
	"file_history":
	[
		"/sites/www/06-Fab01-projects/pro_scheduler/src/Acme/StoreBundle/Entity/Category.php",
		"/sites/www/06-Fab01-projects/pro_scheduler/src/Acme/StoreBundle/Entity/Product.php",
		"/sites/www/06-Fab01-projects/pro_scheduler/phpunit.xml.dist",
		"/sites/www/06-Fab01-projects/pro_scheduler/composer.lock",
		"/sites/www/06-Fab01-projects/pro_scheduler/README.md",
		"/sites/www/06-Fab01-projects/pro_scheduler/Symfony3.sublime-project",
		"/sites/www/05-Work/eurcom/dev/digital-agenda-reference/platform/index.php",
		"/sites/www/05-Work/eurcom/dev/digital-agenda-reference/platform/sites/all/modules/contrib/email/email.module",
		"/Users/fabrizio/Library/Application Support/Sublime Text 3/Packages/User/SFTP.sublime-settings",
		"/sites/www/05-Work/eurcom/dev/digital-agenda-reference/sftp-config.json",
		"/sites/www/05-Work/eurcom/dev/digital-agenda-reference/lib/modules/ec_mapeditor/ec_mapeditor.drush.inc"
	],
	"find":
	{
		"height": 0.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "Symfony3.sublime-project",
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 45,
						"regions":
						{
						},
						"selection":
						[
							[
								45,
								45
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/JavaScript/JSON.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		},
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 1,
					"file": "src/Acme/StoreBundle/Controller/DefaultController.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8358,
						"regions":
						{
						},
						"selection":
						[
							[
								2260,
								2214
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 717.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 0.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.299126578115,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"output.sftp":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "Symfony3.sublime-project",
	"replace":
	{
		"height": 0.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 333.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
